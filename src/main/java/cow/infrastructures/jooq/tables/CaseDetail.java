/*
 * This file is generated by jOOQ.
 */
package cow.infrastructures.jooq.tables;


import cow.infrastructures.jooq.Cow;
import cow.infrastructures.jooq.Keys;
import cow.infrastructures.jooq.tables.records.CaseDetailRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CaseDetail extends TableImpl<CaseDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cow.case_detail</code>
     */
    public static final CaseDetail CASE_DETAIL = new CaseDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseDetailRecord> getRecordType() {
        return CaseDetailRecord.class;
    }

    /**
     * The column <code>cow.case_detail.id</code>.
     */
    public final TableField<CaseDetailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cow.case_detail.url</code>. url
     */
    public final TableField<CaseDetailRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255), this, "url");

    /**
     * The column <code>cow.case_detail.path</code>. 请求路径
     */
    public final TableField<CaseDetailRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(255), this, "请求路径");

    /**
     * The column <code>cow.case_detail.header</code>. 请求头
     */
    public final TableField<CaseDetailRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.CLOB, this, "请求头");

    /**
     * The column <code>cow.case_detail.method</code>. 请求方式
     */
    public final TableField<CaseDetailRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.CHAR(10), this, "请求方式");

    /**
     * The column <code>cow.case_detail.data</code>. 请求报文
     */
    public final TableField<CaseDetailRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "请求报文");

    /**
     * The column <code>cow.case_detail.assertions</code>. 断言
     */
    public final TableField<CaseDetailRecord, String> ASSERTIONS = createField(DSL.name("assertions"), SQLDataType.CLOB, this, "断言");

    /**
     * The column <code>cow.case_detail.extract</code>. 提取参数
     */
    public final TableField<CaseDetailRecord, String> EXTRACT = createField(DSL.name("extract"), SQLDataType.CLOB, this, "提取参数");

    /**
     * The column <code>cow.case_detail.description</code>. 描述
     */
    public final TableField<CaseDetailRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "描述");

    /**
     * The column <code>cow.case_detail.group_id</code>. 用例组id
     */
    public final TableField<CaseDetailRecord, String> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.VARCHAR(32), this, "用例组id");

    /**
     * The column <code>cow.case_detail.sort</code>. 执行顺序
     */
    public final TableField<CaseDetailRecord, Integer> SORT = createField(DSL.name("sort"), SQLDataType.INTEGER.nullable(false), this, "执行顺序");

    /**
     * The column <code>cow.case_detail.delete_flag</code>. 删除标志, 1未删除 0已删除
     */
    public final TableField<CaseDetailRecord, Integer> DELETE_FLAG = createField(DSL.name("delete_flag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "删除标志, 1未删除 0已删除");

    /**
     * The column <code>cow.case_detail.record_date</code>. 创建日期
     */
    public final TableField<CaseDetailRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.inline("1000-01-01", SQLDataType.LOCALDATE)), this, "创建日期");

    /**
     * The column <code>cow.case_detail.created_at</code>. 创建时间
     */
    public final TableField<CaseDetailRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>cow.case_detail.created_by</code>.
     */
    public final TableField<CaseDetailRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("system", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cow.case_detail.updated_at</code>. 更新时间
     */
    public final TableField<CaseDetailRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>cow.case_detail.updated_by</code>.
     */
    public final TableField<CaseDetailRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private CaseDetail(Name alias, Table<CaseDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private CaseDetail(Name alias, Table<CaseDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cow.case_detail</code> table reference
     */
    public CaseDetail(String alias) {
        this(DSL.name(alias), CASE_DETAIL);
    }

    /**
     * Create an aliased <code>cow.case_detail</code> table reference
     */
    public CaseDetail(Name alias) {
        this(alias, CASE_DETAIL);
    }

    /**
     * Create a <code>cow.case_detail</code> table reference
     */
    public CaseDetail() {
        this(DSL.name("case_detail"), null);
    }

    public <O extends Record> CaseDetail(Table<O> child, ForeignKey<O, CaseDetailRecord> key) {
        super(child, key, CASE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Cow.COW;
    }

    @Override
    public Identity<CaseDetailRecord, Integer> getIdentity() {
        return (Identity<CaseDetailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CaseDetailRecord> getPrimaryKey() {
        return Keys.KEY_CASE_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<CaseDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseDetailRecord>>asList(Keys.KEY_CASE_DETAIL_PRIMARY);
    }

    @Override
    public CaseDetail as(String alias) {
        return new CaseDetail(DSL.name(alias), this);
    }

    @Override
    public CaseDetail as(Name alias) {
        return new CaseDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseDetail rename(String name) {
        return new CaseDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseDetail rename(Name name) {
        return new CaseDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, String, String, String, String, String, String, String, String, Integer, Integer, LocalDate, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
