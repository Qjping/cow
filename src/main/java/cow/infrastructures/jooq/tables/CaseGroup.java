/*
 * This file is generated by jOOQ.
 */
package cow.infrastructures.jooq.tables;


import cow.infrastructures.jooq.Cow;
import cow.infrastructures.jooq.Keys;
import cow.infrastructures.jooq.tables.records.CaseGroupRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CaseGroup extends TableImpl<CaseGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cow.case_group</code>
     */
    public static final CaseGroup CASE_GROUP = new CaseGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseGroupRecord> getRecordType() {
        return CaseGroupRecord.class;
    }

    /**
     * The column <code>cow.case_group.id</code>.
     */
    public final TableField<CaseGroupRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>cow.case_group.description</code>.
     */
    public final TableField<CaseGroupRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cow.case_group.delete_flag</code>. 删除标志, 1未删除 0已删除
     */
    public final TableField<CaseGroupRecord, Integer> DELETE_FLAG = createField(DSL.name("delete_flag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "删除标志, 1未删除 0已删除");

    /**
     * The column <code>cow.case_group.record_date</code>. 创建日期
     */
    public final TableField<CaseGroupRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.inline("1000-01-01", SQLDataType.LOCALDATE)), this, "创建日期");

    /**
     * The column <code>cow.case_group.created_at</code>. 创建时间
     */
    public final TableField<CaseGroupRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>cow.case_group.created_by</code>.
     */
    public final TableField<CaseGroupRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("system", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cow.case_group.updated_at</code>. 更新时间
     */
    public final TableField<CaseGroupRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>cow.case_group.updated_by</code>.
     */
    public final TableField<CaseGroupRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private CaseGroup(Name alias, Table<CaseGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private CaseGroup(Name alias, Table<CaseGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cow.case_group</code> table reference
     */
    public CaseGroup(String alias) {
        this(DSL.name(alias), CASE_GROUP);
    }

    /**
     * Create an aliased <code>cow.case_group</code> table reference
     */
    public CaseGroup(Name alias) {
        this(alias, CASE_GROUP);
    }

    /**
     * Create a <code>cow.case_group</code> table reference
     */
    public CaseGroup() {
        this(DSL.name("case_group"), null);
    }

    public <O extends Record> CaseGroup(Table<O> child, ForeignKey<O, CaseGroupRecord> key) {
        super(child, key, CASE_GROUP);
    }

    @Override
    public Schema getSchema() {
        return Cow.COW;
    }

    @Override
    public UniqueKey<CaseGroupRecord> getPrimaryKey() {
        return Keys.KEY_CASE_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<CaseGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseGroupRecord>>asList(Keys.KEY_CASE_GROUP_PRIMARY);
    }

    @Override
    public CaseGroup as(String alias) {
        return new CaseGroup(DSL.name(alias), this);
    }

    @Override
    public CaseGroup as(Name alias) {
        return new CaseGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseGroup rename(String name) {
        return new CaseGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseGroup rename(Name name) {
        return new CaseGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, Integer, LocalDate, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
