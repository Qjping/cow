/*
 * This file is generated by jOOQ.
 */
package cow.infrastructures.jooq.tables;


import cow.infrastructures.jooq.Cow;
import cow.infrastructures.jooq.Keys;
import cow.infrastructures.jooq.tables.records.CaseResultRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CaseResult extends TableImpl<CaseResultRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cow.case_result</code>
     */
    public static final CaseResult CASE_RESULT = new CaseResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseResultRecord> getRecordType() {
        return CaseResultRecord.class;
    }

    /**
     * The column <code>cow.case_result.id</code>.
     */
    public final TableField<CaseResultRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cow.case_result.case_group_id</code>.
     */
    public final TableField<CaseResultRecord, Integer> CASE_GROUP_ID = createField(DSL.name("case_group_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cow.case_result.case_id</code>.
     */
    public final TableField<CaseResultRecord, Integer> CASE_ID = createField(DSL.name("case_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cow.case_result.url</code>. url
     */
    public final TableField<CaseResultRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255), this, "url");

    /**
     * The column <code>cow.case_result.path</code>. 请求路径
     */
    public final TableField<CaseResultRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(255), this, "请求路径");

    /**
     * The column <code>cow.case_result.header</code>. 请求头
     */
    public final TableField<CaseResultRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.CLOB, this, "请求头");

    /**
     * The column <code>cow.case_result.method</code>. 请求方式
     */
    public final TableField<CaseResultRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.CHAR(10), this, "请求方式");

    /**
     * The column <code>cow.case_result.data</code>. 请求报文
     */
    public final TableField<CaseResultRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "请求报文");

    /**
     * The column <code>cow.case_result.response_result</code>.
     */
    public final TableField<CaseResultRecord, String> RESPONSE_RESULT = createField(DSL.name("response_result"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>cow.case_result.assert_result</code>. 断言结果
     */
    public final TableField<CaseResultRecord, String> ASSERT_RESULT = createField(DSL.name("assert_result"), SQLDataType.VARCHAR(255), this, "断言结果");

    /**
     * The column <code>cow.case_result.extract_result</code>. 提取结果
     */
    public final TableField<CaseResultRecord, String> EXTRACT_RESULT = createField(DSL.name("extract_result"), SQLDataType.VARCHAR(255), this, "提取结果");

    /**
     * The column <code>cow.case_result.user_define_parameters</code>.
     */
    public final TableField<CaseResultRecord, String> USER_DEFINE_PARAMETERS = createField(DSL.name("user_define_parameters"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>cow.case_result.delete_flag</code>. 删除标志, 1未删除 0已删除
     */
    public final TableField<CaseResultRecord, Integer> DELETE_FLAG = createField(DSL.name("delete_flag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "删除标志, 1未删除 0已删除");

    /**
     * The column <code>cow.case_result.record_date</code>. 创建日期
     */
    public final TableField<CaseResultRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.inline("1000-01-01", SQLDataType.LOCALDATE)), this, "创建日期");

    /**
     * The column <code>cow.case_result.created_at</code>. 创建时间
     */
    public final TableField<CaseResultRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>cow.case_result.created_by</code>.
     */
    public final TableField<CaseResultRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("system", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cow.case_result.updated_at</code>. 更新时间
     */
    public final TableField<CaseResultRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>cow.case_result.updated_by</code>.
     */
    public final TableField<CaseResultRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private CaseResult(Name alias, Table<CaseResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private CaseResult(Name alias, Table<CaseResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cow.case_result</code> table reference
     */
    public CaseResult(String alias) {
        this(DSL.name(alias), CASE_RESULT);
    }

    /**
     * Create an aliased <code>cow.case_result</code> table reference
     */
    public CaseResult(Name alias) {
        this(alias, CASE_RESULT);
    }

    /**
     * Create a <code>cow.case_result</code> table reference
     */
    public CaseResult() {
        this(DSL.name("case_result"), null);
    }

    public <O extends Record> CaseResult(Table<O> child, ForeignKey<O, CaseResultRecord> key) {
        super(child, key, CASE_RESULT);
    }

    @Override
    public Schema getSchema() {
        return Cow.COW;
    }

    @Override
    public Identity<CaseResultRecord, Integer> getIdentity() {
        return (Identity<CaseResultRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CaseResultRecord> getPrimaryKey() {
        return Keys.KEY_CASE_RESULT_PRIMARY;
    }

    @Override
    public List<UniqueKey<CaseResultRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseResultRecord>>asList(Keys.KEY_CASE_RESULT_PRIMARY);
    }

    @Override
    public CaseResult as(String alias) {
        return new CaseResult(DSL.name(alias), this);
    }

    @Override
    public CaseResult as(Name alias) {
        return new CaseResult(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseResult rename(String name) {
        return new CaseResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseResult rename(Name name) {
        return new CaseResult(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, Integer, Integer, String, String, String, String, String, String, String, String, String, Integer, LocalDate, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
