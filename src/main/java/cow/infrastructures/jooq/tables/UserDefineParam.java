/*
 * This file is generated by jOOQ.
 */
package cow.infrastructures.jooq.tables;


import cow.infrastructures.jooq.Cow;
import cow.infrastructures.jooq.Keys;
import cow.infrastructures.jooq.tables.records.UserDefineParamRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDefineParam extends TableImpl<UserDefineParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cow.user_define_param</code>
     */
    public static final UserDefineParam USER_DEFINE_PARAM = new UserDefineParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDefineParamRecord> getRecordType() {
        return UserDefineParamRecord.class;
    }

    /**
     * The column <code>cow.user_define_param.id</code>.
     */
    public final TableField<UserDefineParamRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cow.user_define_param.case_group_id</code>.
     */
    public final TableField<UserDefineParamRecord, Integer> CASE_GROUP_ID = createField(DSL.name("case_group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cow.user_define_param.user_define_parameters</code>.
     */
    public final TableField<UserDefineParamRecord, String> USER_DEFINE_PARAMETERS = createField(DSL.name("user_define_parameters"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>cow.user_define_param.delete_flag</code>. 删除标志, 1未删除 0已删除
     */
    public final TableField<UserDefineParamRecord, Integer> DELETE_FLAG = createField(DSL.name("delete_flag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "删除标志, 1未删除 0已删除");

    /**
     * The column <code>cow.user_define_param.record_date</code>. 创建日期
     */
    public final TableField<UserDefineParamRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.inline("1000-01-01", SQLDataType.LOCALDATE)), this, "创建日期");

    /**
     * The column <code>cow.user_define_param.created_at</code>. 创建时间
     */
    public final TableField<UserDefineParamRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>cow.user_define_param.created_by</code>.
     */
    public final TableField<UserDefineParamRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("system", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cow.user_define_param.updated_at</code>. 更新时间
     */
    public final TableField<UserDefineParamRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>cow.user_define_param.updated_by</code>.
     */
    public final TableField<UserDefineParamRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private UserDefineParam(Name alias, Table<UserDefineParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDefineParam(Name alias, Table<UserDefineParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cow.user_define_param</code> table reference
     */
    public UserDefineParam(String alias) {
        this(DSL.name(alias), USER_DEFINE_PARAM);
    }

    /**
     * Create an aliased <code>cow.user_define_param</code> table reference
     */
    public UserDefineParam(Name alias) {
        this(alias, USER_DEFINE_PARAM);
    }

    /**
     * Create a <code>cow.user_define_param</code> table reference
     */
    public UserDefineParam() {
        this(DSL.name("user_define_param"), null);
    }

    public <O extends Record> UserDefineParam(Table<O> child, ForeignKey<O, UserDefineParamRecord> key) {
        super(child, key, USER_DEFINE_PARAM);
    }

    @Override
    public Schema getSchema() {
        return Cow.COW;
    }

    @Override
    public Identity<UserDefineParamRecord, Integer> getIdentity() {
        return (Identity<UserDefineParamRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserDefineParamRecord> getPrimaryKey() {
        return Keys.KEY_USER_DEFINE_PARAM_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserDefineParamRecord>> getKeys() {
        return Arrays.<UniqueKey<UserDefineParamRecord>>asList(Keys.KEY_USER_DEFINE_PARAM_PRIMARY);
    }

    @Override
    public UserDefineParam as(String alias) {
        return new UserDefineParam(DSL.name(alias), this);
    }

    @Override
    public UserDefineParam as(Name alias) {
        return new UserDefineParam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefineParam rename(String name) {
        return new UserDefineParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefineParam rename(Name name) {
        return new UserDefineParam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, Integer, LocalDate, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
