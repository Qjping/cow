/*
 * This file is generated by jOOQ.
 */
package cow.infrastructures.jooq.tables;


import cow.infrastructures.jooq.Cow;
import cow.infrastructures.jooq.Keys;
import cow.infrastructures.jooq.tables.records.UserAccountRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccount extends TableImpl<UserAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cow.user_account</code>
     */
    public static final UserAccount USER_ACCOUNT = new UserAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccountRecord> getRecordType() {
        return UserAccountRecord.class;
    }

    /**
     * The column <code>cow.user_account.id</code>.
     */
    public final TableField<UserAccountRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>cow.user_account.user_id</code>.
     */
    public final TableField<UserAccountRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>cow.user_account.account</code>. 帐号即工号
     */
    public final TableField<UserAccountRecord, String> ACCOUNT = createField(DSL.name("account"), SQLDataType.VARCHAR(255), this, "帐号即工号");

    /**
     * The column <code>cow.user_account.password</code>. 密码
     */
    public final TableField<UserAccountRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(50), this, "密码");

    /**
     * The column <code>cow.user_account.created_at</code>.
     */
    public final TableField<UserAccountRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>cow.user_account.updated_at</code>.
     */
    public final TableField<UserAccountRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>cow.user_account.record_date</code>.
     */
    public final TableField<UserAccountRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.defaultValue(DSL.inline("1000-01-01", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>cow.user_account.created_by</code>. 创建人
     */
    public final TableField<UserAccountRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(32), this, "创建人");

    /**
     * The column <code>cow.user_account.salt</code>. 密码加密盐
     */
    public final TableField<UserAccountRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR(50), this, "密码加密盐");

    /**
     * The column <code>cow.user_account.status</code>. -1被删除
     */
    public final TableField<UserAccountRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "-1被删除");

    private UserAccount(Name alias, Table<UserAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAccount(Name alias, Table<UserAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cow.user_account</code> table reference
     */
    public UserAccount(String alias) {
        this(DSL.name(alias), USER_ACCOUNT);
    }

    /**
     * Create an aliased <code>cow.user_account</code> table reference
     */
    public UserAccount(Name alias) {
        this(alias, USER_ACCOUNT);
    }

    /**
     * Create a <code>cow.user_account</code> table reference
     */
    public UserAccount() {
        this(DSL.name("user_account"), null);
    }

    public <O extends Record> UserAccount(Table<O> child, ForeignKey<O, UserAccountRecord> key) {
        super(child, key, USER_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Cow.COW;
    }

    @Override
    public UniqueKey<UserAccountRecord> getPrimaryKey() {
        return Keys.KEY_USER_ACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAccountRecord>>asList(Keys.KEY_USER_ACCOUNT_PRIMARY, Keys.KEY_USER_ACCOUNT_MERP_ACCOUNT_UN);
    }

    @Override
    public UserAccount as(String alias) {
        return new UserAccount(DSL.name(alias), this);
    }

    @Override
    public UserAccount as(Name alias) {
        return new UserAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(String name) {
        return new UserAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(Name name) {
        return new UserAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, LocalDateTime, LocalDateTime, LocalDate, String, String, Byte> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
